input {
	beats {
		port => 5044
	}

	tcp {
		port => 5000
	}
}

## Add your filters / logstash plugins configuration here
filter {
  if [log_type]=="access_log" {
      grok {
          match => { "message" => [
                  "%{TIMESTAMP_ISO8601:access_time} (?:-|%{IPORHOST:destination.address}) (?:-|%{WORD:http.request.method}) (?:-|%{NOTSPACE:url.path}) (?:-|%{NOTSPACE:url.query}) (?:-|%{NUMBER:destination.port:long}) (?:-|%{NOTSPACE:user.name}) (?:-|%{IPORHOST:source.address}) (?:-|%{NOTSPACE:user_agent.original}) (?:-|%{NOTSPACE:http.request.referrer}) (?:-|%{NUMBER:http.response.status_code:long}) (?:-|%{NUMBER:access.sub_status:long}) (?:-|%{NUMBER:access.win32_status:long}) (?:-|%{NUMBER:temp.duration:long})",
                  "%{TIMESTAMP_ISO8601:access_time} (?:-|%{NOTSPACE:access.site_name}) (?:-|%{WORD:http.request.method}) (?:-|%{NOTSPACE:url.path}) (?:-|%{NOTSPACE:url.query}) (?:-|%{NUMBER:destination.port:long}) (?:-|%{NOTSPACE:user.name}) (?:-|%{IPORHOST:source.address}) (?:-|%{NOTSPACE:user_agent.original}) (?:-|%{NOTSPACE:access.cookie}) (?:-|%{NOTSPACE:http.request.referrer}) (?:-|%{NOTSPACE:destination.domain}) (?:-|%{NUMBER:http.response.status_code:long}) (?:-|%{NUMBER:access.sub_status:long}) (?:-|%{NUMBER:access.win32_status:long}) (?:-|%{NUMBER:http.response.body.bytes:long}) (?:-|%{NUMBER:http.request.body.bytes:long}) (?:-|%{NUMBER:temp.duration:long})",
                  "%{TIMESTAMP_ISO8601:access_time} (?:-|%{NOTSPACE:access.site_name}) (?:-|%{NOTSPACE:access.server_name}) (?:-|%{IPORHOST:destination.address}) (?:-|%{WORD:http.request.method}) (?:-|%{NOTSPACE:url.path}) (?:-|%{NOTSPACE:url.query}) (?:-|%{NUMBER:destination.port:long}) (?:-|%{NOTSPACE:user.name}) (?:-|%{IPORHOST:source.address}) (?:-|HTTP/%{NUMBER:http.version}) (?:-|%{NOTSPACE:user_agent.original}) (?:-|%{NOTSPACE:access.cookie}) (?:-|%{NOTSPACE:http.request.referrer}) (?:-|%{NOTSPACE:destination.domain}) (?:-|%{NUMBER:http.response.status_code:long}) (?:-|%{NUMBER:access.sub_status:long}) (?:-|%{NUMBER:access.win32_status:long}) (?:-|%{NUMBER:http.response.body.bytes:long}) (?:-|%{NUMBER:http.request.body.bytes:long}) (?:-|%{NUMBER:temp.duration:long})",
                  "%{TIMESTAMP_ISO8601:access_time} \[%{IPORHOST:destination.address}\]\(http://%{IPORHOST:destination.address}\) (?:-|%{WORD:http.request.method}) (?:-|%{NOTSPACE:url.path}) (?:-|%{NOTSPACE:url.query}) (?:-|%{NUMBER:destination.port:long}) (?:-|%{NOTSPACE:user.name}) \[%{IPORHOST:source.address}\]\(http://%{IPORHOST:source.address}\) (?:-|%{NOTSPACE:user_agent.original}) (?:-|%{NUMBER:http.response.status_code:long}) (?:-|%{NUMBER:access.sub_status:long}) (?:-|%{NUMBER:access.win32_status:long}) (?:-|%{NUMBER:temp.duration:long})",
                  "%{TIMESTAMP_ISO8601:access_time} (?:-|%{IPORHOST:destination.address}) (?:-|%{WORD:http.request.method}) (?:-|%{NOTSPACE:url.path}) (?:-|%{NOTSPACE:url.query}) (?:-|%{NUMBER:destination.port:long}) (?:-|%{NOTSPACE:user.name}) (?:-|%{IPORHOST:source.address}) (?:-|%{NOTSPACE:user_agent.original}) (?:-|%{NUMBER:http.response.status_code:long}) (?:-|%{NUMBER:access.sub_status:long}) (?:-|%{NUMBER:access.win32_status:long}) (?:-|%{NUMBER:temp.duration:long})",
                  '%{IPORHOST:destination.domain} %{IPORHOST:source.ip} - %{DATA:user.name} \[%{HTTPDATE:access_time}\]"(?:%{WORD:http.request.method} %{DATA:url.path} HTTP/%{NUMBER:http.version}|-)?"%{NUMBER:http.response.status_code:long} (?:%{NUMBER:http.response.body.bytes:long}|-)("%{DATA:http.request.referrer}")?( "%{DATA:user_agent.original}")?',
                  '%{IPORHOST:source.address} - %{DATA:user.name} \[%{HTTPDATE:access_time}\] "(?:%{WORD:http.request.method} %{DATA:url.path} HTTP/%{NUMBER:http.version}|-)?" %{NUMBER:http.response.status_code:long} (?:%{NUMBER:http.response.body.bytes:long}|-)("%{DATA:http.request.referrer}")?( "%{DATA:user_agent.original}")?',
                  '%{IPORHOST:source.address} - %{DATA:user.name} \[%{HTTPDATE:access_time}\]"-" %{NUMBER:http.response.status_code:long} -',
                  '\[%{HTTPDATE:access_time}\] %{IPORHOST:source.address} %{DATA:access.ssl.protocol} %{DATA:access.ssl.cipher} "%{WORD:http.request.method} %{DATA:url.path}HTTP/%{NUMBER:http.version}" (-|%{NUMBER:http.response.body.bytes:long})'
              ]
          }
      }
      date {
          match => [ "access_time" ,"yyyy-MM-dd HH:mm:ss","dd/MMM/yyyy:hh:mm:ss Z" ]
          timezone => "UTC"
          target => "timestamp"
      }
  }
  else if [log_type]=="application_log" and [stack]==".NET" {
      grok {
          pattern_definitions => {
              "THREAD_NAME" => "%{NOTSPACE}"
              "CLASS_POINT" => "%{NOTSPACE}"
          }
          match => { "message" => [
                  "%{TIME:timestamp} %{LOGLEVEL:loglevel} \[%{THREAD_NAME:thread}\] %{JAVACLASS:class} - %{GREEDYDATA:detail}",
                  "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:loglevel} \[%{THREAD_NAME:thread}\] %{JAVACLASS:class} - %{GREEDYDATA:detail}"
              ]
          }
      }
  }
  else if [log_type]=="application_log" and [stack]=="JAVA" {
      grok {
          pattern_definitions => {
              "THREAD_NAME" => "%{NOTSPACE}"
              "CLASS_POINT" => "%{NOTSPACE}"
          }
          match => { "message" => [
                  "%{TIME:timestamp} %{LOGLEVEL:loglevel} \[%{THREAD_NAME:thread}\] %{JAVACLASS:class} - %{GREEDYDATA:detail}",
                  "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:loglevel} \[%{THREAD_NAME:thread}\] %{JAVACLASS:class} - %{GREEDYDATA:detail}"
              ]
          }
      }
  }
  else if [log_type]=="application_log" and [stack]=="NODE" {
      grok {
          pattern_definitions => {
              "THREAD_NAME" => "%{NOTSPACE}"
              "SCRIPT_FILE" => "%{NOTSPACE}"

          }
          match => { "message" => [
                  "%{TIME:timestamp} %{LOGLEVEL:loglevel} %{SCRIPT_FILE:class} - %{GREEDYDATA:detail}",
                  "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:loglevel} %{SCRIPT_FILE:class} - %{GREEDYDATA:detail}"
              ]
          }
      }
  }
  mutate { remove_field => [ "message", "stack", "agent","log","tags","host","input","access_time" ] }
}

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
		user => "elastic"
		password => "changeme"
		ecs_compatibility => disabled
	}
}
output {
  if [log_type] == "access_log" {
      elasticsearch {
		hosts => "elasticsearch:9200"
		user => "elastic"
		password => "changeme"
		ecs_compatibility => disabled
          index => "logstash-accesslog"
          
      }
  }
  else if [log_type] == "application_log" {
      elasticsearch {
		hosts => "elasticsearch:9200"
		user => "elastic"
		password => "changeme"
		ecs_compatibility => disabled
          manage_template => false
          index => "logstash-applicationlog"
          
      }
  }
  stdout { codec => rubydebug }
}
